$schema: "http://dcc.icgc-argo.org/draft-00/schema#"

$id: "fastq_submission"
title: Submitted FASTQ file(s) for one read group
version: 0
category: data_bundle
type: object
description: ""
additionalProperties: false

systemProperties:
- id
- status

required:
- type
- program
- read_group_submitter_id
- files

uniqueKeys:
- [ id ]
- [ program, read_group_submitter_id ]

references:
- selfKey: [ program, read_group_submitter_id ]
  reference:
    targetEntity: read_group  # FASTQ submission bundle to read_group relationship is one-to-one
    targetKey: [ program, submitter_id ]

scriptValidations:  # script based validation, call returns 'true' for valid or 'false' for invalid
# psuedo code here to illustrate the idea
- "$rg_fq_count_validation(count=len(files.fastq_file), read_group){if (read_group.is_paired_end and count == 2) {return true}; if (!read_group.is_paired_end and count == 1) {return true}; return false }"

properties:
  type:
    enum: [ "fastq_submission" ]
  status:
    $ref: _definitions#/common/properties/bundle_status
  id:
    $ref: _definitions#/common/properties/id
  program:
    type: string
  read_group_submitter_id:
    type: string
  files:  # fastq files
    type: object
    properties:
      fastq_file:
        type: array
        minItems: 1  # for single end
        maxItems: 2  # for paired end
        uniqueItems: true
        items:
          type: object
          systemProperties: [ id, bundle_id, format, extension, date_type ]
          allOf:
          - $ref: _definitions#/submitted_file
          - properties:
              format:
                const: "FASTQ"
              extension:
                enum: [ ".fastq.gz", ".fq.gz" ]
              date_type:
                const: "Sequencing Reads"
