$schema: "http://json-schema.org/draft-07/schema#"

$id: "sequencing_experiment"
title: Sequencing experiment
type: object
description: ""

definitions:
  version:
    $ref: '_definitions#/_/properties/version'
    const: 0
  relationDef:
    $ref: '_definitions#/_/properties/relationDef'
    const:
      primaryKey:
      - '#/definitions/systemProperties/properties/id'
      naturalKey:
      - '#/properties/program'
      - '#/properties/submitter_id'
      references:
      - foreignKey:
        - '#/properties/program'
        - '#/properties/sample_submitter_id'
        targetEntity: 'sample'
        targetKey:  # relationship by naturalKey
        - 'sample#/properties/program'
        - 'sample#/properties/submitter_id'
      - foreignKey:
        - '#/definitions/systemProperties/properties/sample_id'
        targetEntity: 'sample'
        targetKey:  # relationship by primaryKey
        - 'sample#/definitions/systemProperties/properties/id'
  systemProperties:  # properties will be populated by the system
    propertyNames:
      enum: [ id, sample_id ]
    required: [ id, sample_id ]
    properties:
      id:  # primary key, defined in 'primaryKey'
        allOf:
        - $ref: _definitions#/common/properties/uuid
      sample_id:  # foreign key to sample entity, the relationship is defined in 'references'
        $ref: sample#/definitions/systemProperties/properties/id

propertyNames:
  enum: [ type, program, submitter_id, sample_submitter_id, sequencing_center, sequencing_date,
          platform, platform_model, library_strategy, read_group_count, read_groups ]

required:
- type
- program
- submitter_id
- sample_submitter_id
- sequencing_center
- sequencing_date
- platform
- platform_model
- library_strategy
- read_group_count
- read_groups

properties:
  type:
    const: "sequencing_experiment"
  program:
    $ref: _definitions#/common/properties/program_short_name
  submitter_id:  # submitter's sequencing experiment ID
    $ref: _definitions#/common/properties/submitter_id
  sample_submitter_id:  # sample used in a sequencing experiment
    $ref: _definitions#/common/properties/submitter_id
  sequencing_center:  # CN in BAM @GR header
    type: string
  platform:  # PL in BAM @RG header
    enum: [ 'Illumina', 'SOLiD', 'LS454', 'PacBio', 'Ion Torrent', 'Nanopore', 'Complete Genomics' ]
  platform_model:  # Illumina HiSeq 2000
    type: string
    enum:
    - HiSeq 2000
    - HiSeq 2500
  library_strategy:
    enum:
    - "WGS"
    - "WXS"
    - "RNA-Seq"
    - "Bisulfite-Seq"
    - "ChIP-Seq"
  sequencing_date:
    type: string
    format: date
    example: "2019-06-16"
  read_group_count:
    type: integer
    minimum: 1
    scriptValidations:  # pseudo code to verify read_group_count is correctly match number of read groups
    - "$intEqual(int1=read_group_count, int2=$len(read_groups)){if(int1==int2){return true} return false}"
  read_groups:  # read groups produced by this sequencing experiment
    type: array
    items:
      minItems: 1
      $ref: read_group
      definitions:
        relationDef:
          $ref: '_definitions#/_/properties/relationDef'
          const:
            references:
            - foreignKey:
              - '#/properties/read_groups/items/definitions/systemProperties/properties/read_group_id'
              targetEntity: 'read_group'  # sequencing_experiment to read_group relationship is one-to-many
              targetKey:  # relationship by primaryKey
              - 'read_group#/definitions/systemProperties/properties/id'

        systemProperties:
          propertyNames:
            enum: [ type, read_group_id ]
          required: [ type, read_group_id ]
          properties:
            type:
              const: read_group
            read_group_id:
              $ref: read_group#/definitions/systemProperties/properties/id
