$schema: "http://json-schema.org/draft-07/schema#"

$id: "sanger_ssm_call"
title: SSM calling by Sanger Workflow
type: object
description: ""

definitions:
  version:
    $ref: '_definitions#/_/properties/version'
    const: 0
  relationDef:
    $ref: '_definitions#/_/properties/relationDef'
    const:
      primaryKey:
      - '#/definitions/systemProperties/properties/id'
      uniqueKey:
      - [ '#/properties/inputs/properties/tumour/properties/dna_alignment_id' ]  # one tumour dna_alignment can only appear once in sanger_ssm_call, this prevents duplicated calling
      references:
      - foreignKey:
        - '#/properties/inputs/properties/tumour/properties/dna_alignment_id'
        targetEntity: 'dna_alignment'  # sanger_ssm_call to tumour dna_alignment is one-to-one relationship
        targetKey:  # relationship by primaryKey
        - 'dna_alignment#/definitions/systemProperties/properties/id'
      - foreignKey:
        - '#/properties/inputs/properties/normal/properties/dna_alignment_id'
        targetEntity: 'dna_alignment'  # sanger_ssm_call to normal dna_alignment could be one-to-one or many-to-one relationship, one normal may paired with one or more tumours
        targetKey:  # relationship by primaryKey
        - 'dna_alignment#/definitions/systemProperties/properties/id'

  systemProperties:
    propertyNames:
      enum: [ status, id, donor, library_strategy ]
    required: [ status, id, donor, library_strategy ]
    properties:
      status:
        $ref: _definitions#/common/properties/bundle_status
      id:
        $ref: _definitions#/common/properties/uuid
      donor:  # donor/biospecimen tree
        additionalProperties: false
        required: [ donor_id, specimen, matched_normal ]
        properties:
          donor_id:
            $ref: donor#/definitions/systemProperties/properties/id
          specimen:
            additionalProperties: false
            required: [ specimen_id, specimen_type, sample ]
            properties:
              specimen_id:
                $ref: specimen#/definitions/systemProperties/properties/id
              specimen_type:  # to be magically populated by the system through traversing back to the 'specimen'
                $ref: specimen#/properties/specimen_type
              sample:
                additionalProperties: false
                required: [ sample_id ]
                properties:
                  sample_id:  # to be magically populated by the system through traversing back to the 'sample'
                    $ref: sample#/definitions/systemProperties/properties/id
          matched_normal:  # identified via noral/dna_alignment_id
            additionalProperties: false
            required: [ specimen_id, specimen_type, sample ]
            properties:
              specimen_id:
                $ref: specimen#/definitions/systemProperties/properties/id
              specimen_type:  # to be magically populated by the system through traversing back to the 'specimen'
                $ref: specimen#/properties/specimen_type
              sample:
                additionalProperties: false
                required: [ sample_id ]
                properties:
                  sample_id:
                    $ref: sample#/definitions/systemProperties/properties/id
      library_strategy:  # to be magically populated by the system through traversing back to the 'sequencing_experiment'
        $ref: sequencing_experiment#/properties/library_strategy

propertyNames:
  enum: [ type, program, inputs, analysis, files ]
required:
- type
- program
- inputs
- analysis
- files

properties:
  type:
    const: "sanger_ssm_call"
  program:
    $ref: _definitions#/common/properties/program_short_name
  inputs:
    additionalProperties: false
    required: [ tumour, normal ]
    properties:
      tumour:
        additionalProperties: false
        required: [ dna_alignment_id, files ]
        properties:
          dna_alignment_id:  # the input bundle of tumour dna_alignment
            $ref: dna_alignment#/definitions/systemProperties/properties/id
          files:
            additionalProperties: false
            required: [ aligned_dna_seq ]
            properties:
              aligned_dna_seq:
                additionalProperties: false
                required: [ object_uri, bundle_id, object_id, name, secondary_file, repository ]
                properties:
                  object_uri:  # if file is local, object_id will be 'null'
                    type: string  # pattern: song://<repository>/<bundle_id>/<object_id>
                  bundle_id:  # dna_alignment
                    $ref: "#/properties/inputs/properties/tumour/properties/dna_alignment_id"  # get value from there
                  object_id:  # aligned seq object ID in the above dna_alignment
                    $ref: '_definitions#/common/properties/uuid'
                  name:  # file name
                    pattern: '\.(bam|cram)$'  # find the bam or cram in the bundle as input file
                  secondary_file:  # secondary file(s), following CWL standard
                    enum: [ '.bai', '.crai' ]
                  repository:  # repo where the object resides
                    type: string
      normal:
        additionalProperties: false
        required: [ dna_alignment_id, files ]
        properties:
          dna_alignment_id:  # the input bundle of normal dna_alignment
            $ref: dna_alignment#/definitions/systemProperties/properties/id
          files:
            additionalProperties: false
            required: [ aligned_dna_seq ]
            properties:
              aligned_dna_seq:
                additionalProperties: false
                required: [ object_uri, bundle_id, object_id, name, secondary_file, repository ]
                properties:
                  object_uri:  # if file is local, object_id will be 'null'
                    type: string  # pattern: song://<repository>/<bundle_id>/<object_id>
                  bundle_id:  # dna_alignment
                    $ref: "#/properties/inputs/properties/normal/properties/dna_alignment_id"  # get value from there
                  object_id:  # aligned seq object ID in the above dna_alignment
                    type: string
                  name:  # file name
                    pattern: '\.(bam|cram)$'  # find the bam or cram in the bundle as input file
                  secondary_file:  # secondary file(s), following CWL standard
                    enum: [ '.bai', '.crai' ]
                  repository:  # repo where the object resides
                    type: string
  analysis:
    additionalProperties: false
    required: [ analysis_type, tool, reference_genome, execution ]
    properties:
      analysis_type:
        allOf:
        - $ref: '_definitions#/analysis/properties/analysis_type'
        - const: 'Simple somatic mutation calling'
      reference_genome:
        $ref: '_definitions#/analysis/properties/reference_genome'
      tool:  # Tool refers to what's in GA4GH's Tool Registry Service
        propertyNames:
          $ref: '_definitions#/analysis/properties/tool/toolNames/propertyNames'
        allOf:
        - $ref: '_definitions#/analysis/properties/tool'
        - properties:
            contained_apps:
              type: array
              items:
                type: string
              const: [ CaVEMan ]
      execution:
        $ref: '_definitions#/analysis/properties/execution'
  files:
    type: object
    additionalProperties: false
    properties:
      vcf:
        $ref: "sanger_ssm_call.vcf.data_object"
        definitions:
          relationDef:
            $ref: '_definitions#/_/properties/relationDef'
            const:
              references:
              - foreignKey:
                - '#/properties/files/properties/vcf/definitions/systemProperties/properties/object_id'
                targetEntity: 'data_object'
                targetKey:  # relationship by primaryKey
                - 'sanger_ssm_call.vcf.data_object#/definitions/systemProperties/allOf/1/properties/id'

          systemProperties:
            additionalProperties: false
            required: [ type, object_id ]
            properties:
              type:
                const: data_object
              object_id:
                $ref: sanger_ssm_call.vcf.data_object#/definitions/systemProperties/allOf/1/properties/id

      vcf_index:
        $ref: "sanger_ssm_call.vcf_index.data_object"
        definitions:
          relationDef:
            $ref: '_definitions#/_/properties/relationDef'
            const:
              references:
              - foreignKey:
                - '#/properties/files/properties/vcf_index/definitions/systemProperties/properties/object_id'
                targetEntity: 'data_object'
                targetKey:  # relationship by primaryKey
                - 'sanger_ssm_call.vcf_index.data_object#/definitions/systemProperties/allOf/1/properties/id'

          systemProperties:
            additionalProperties: false
            required: [ type, object_id ]
            properties:
              type:
                const: data_object
              object_id:
                $ref: sanger_ssm_call.vcf_index.data_object#/definitions/systemProperties/allOf/1/properties/id
