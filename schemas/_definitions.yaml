$schema: "http://json-schema.org/draft-07/schema#"

$id: _definitions

_:  # definitions to extend JSON Schema to support relationship, schema version, script-based validations
  properties:
    id:
      const: "argo-metadata-schemas"
    # version number of the schema release
    release:
      const: "0.1.0-rc.1"
    # patten to enforce entity type names, max len 100
    entity_type_$id_patten:
      const: "^[a-z]{1}[a-z0-9_.-]{0,98}[a-z0-9]{1}$"

    version:
      type: integer
      minimum: 0

    relationDef:  # special definition to support additional features such as relationship, uniqueness
      type: object
      additionalProperties: false
      properties:
        primaryKey:
          type: array
          uniqueItems: true
          items:
            type: string
        naturalKey:  # aka business key, which naturally identifies data records uniquely
          type: array
          uniqueItems: true
          items:
            type: string
        uniqueKey:  # can have 0 or more uniqueKeys, each uniqueKey consists of one or more properties
          type: array
          items:
            type: array
            minItems: 1
            uniqueItems: true
            items:
              type: string
        references:
          type: array
          items:
            type: object
            additionalProperties: false
            required: [ foreignKey, targetEntity, targetKey ]
            properties:
              foreignKey:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  type: string
              targetEntity:
                type: string
              targetKey:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  type: string

    scriptValidations:
      type: array
      uniqueItems: true
      items:
        type: string
        pattern: '^\$[_a-zA-Z]+[_a-zA-Z0-9]*\(.+\)(\{.+\})?$'
      default: []

common:
  type: object
  properties:
    uuid:  # surrogate key generated by system
      type: string
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      readOnly: true  # immutable once created
    id:  # surrogate key generated by system
      type: string
      pattern: "^[A-Z]{2}[0-9]+$"
      readOnly: true  # this makes `id` immutable once created
    submitter_id:
      type: string
      pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.:']{0,98}[a-zA-Z0-9]{1}$"  # max length 100, we have submitter IDs over 60 in ICGC
    date:
      type: string
      format: date
    date_time:
      type: string
      format: date-time
    created_at:
      $ref: "#/common/properties/date_time"
    updated_at:
      $ref: "#/common/properties/date_time"
    bundle_status:
      enum:
      - "registered"  # Entity's metadata submitted, validated and stored on the server
      - "uploaded"  # All files in the bundle uploaded and stored on the server
      - "upload_failed"  # One or more files in the bundle failed uploading
      - "published"  # User or admin published the bundle (only possible after all files uploaded)
      - "suppressed"  # User or admin suppressed the bundle (no file in the bundle can be downloaded). Admin can re-publish a suppressed bundle
      - "depreciated"  # This is like 'mark deleted', bundle is depreciated but still accessible, files can not be downloaded (could have been purged from the server)
    program_short_name:
      enum:  # this lists all ARGO program's short names, dummy examples here for now
      - PACA-CA
      - PRAD-CA
      - PBCA-DE
      - PRAD-UK
      - OV-AU

submitted_file:
  type: object
  required: [ name, local_path, size, checksum, checksum_type ]
  allOf:
  - properties:
      name:  # if omitted, name will be original file name from local_path
        type: string
        pattern: "^[A-Za-z0-9_-]{1}[A-Za-z0-9-_.]{0,199}"  # max length 200 chars
      local_path:  # fullpath includes path and file name
        type: string
      size:
        type: integer
        minimum: 0
      checksum:
        type: string
      checksum_type:
        enum: [ md5, sha256, sha512 ]
  - oneOf:
    - properties:
        name:
          pattern: '\.bam$'
        format:
          const: BAM
    - properties:
        name:
          pattern: '\.bam\.bai$'
        format:
          const: BAI
    - properties:
        name:
          pattern: '\.cram$'
        format:
          const: CRAM
    - properties:
        name:
          pattern: '\.cram\.crai$'
        format:
          const: CRAI
    - properties:
        name:
          pattern: '\.fastq\.gz$'
        format:
          const: FASTQ
    - properties:
        name:
          pattern: '\.fq\.gz$'
        format:
          const: FASTQ
    - properties:
        name:
          pattern: '\.vcf\.gz$'
        format:
          const: VCF
    - properties:
        name:
          pattern: '\.vcf\.gz\.tbi$'
        format:
          const: TBI
    - properties:
        name:
          pattern: '\.tgz$'
        format:
          const: TGZ
    - properties:
        name:
          pattern: '\.fa.gz$'  # created by bgzip
        format:
          const: FASTA
    - properties:
        name:
          pattern: '\.fa\.gz\.fai$'
        format:
          const: FAI
    - properties:
        name:
          pattern: '\.fasta.gz$'  # created by bgzip
        format:
          const: FASTA
    - properties:
        name:
          pattern: '\.fasta\.gz\.fai$'
        format:
          const: FAI
    - properties:
        name:
          pattern: '\.txt\.gz$'
        format:
          const: TXT
    - properties:
        name:
          pattern: '\.tsv\.gz$'
        format:
          const: TSV
    - properties:
        name:
          pattern: '\.csv\.gz$'
        format:
          const: CSV
    - properties:
        name:
          pattern: '\.pdf\.gz$'
        format:
          const: PDF
    - properties:
        name:
          pattern: '\.png$'
        format:
          const: PNG

data_object:
  type: object
  allOf:
  - properties:
      id:
        $ref: "#/common/properties/uuid"
      created_at:
        $ref: "#/common/properties/created_at"
      updated_at:
        $ref: "#/common/properties/updated_at"
      data_type:
        oneOf:
        - const: SSM  # acronym, good as facet terms
          title: "Simple Somatic Mutations"  # short title, good for displaying as tooltip
        - const: CNSM
          title: "Copy Number Somatic Mutations"
        - const: StSM
          title: "Structural Somatic Mutations"
        - const: SGV
          title: "Simple Germline Variations"
        - const: StGV
          title: "Structural Germline Variations"
        - const: "Reads"
          title: "Sequencing Reads"
        - const: "Unaligned Reads"
          title: "Unaligned Sequencing Reads"
        - const: "Aligned Reads"
          title: "Aligned Sequencing Reads"
        - const: "Aligned Reads Index"
          title: "Aligned Sequencing Reads Index"
        - const: "VCF Index"
          title: "VCF Index"
        - const: "RG QC"
          title: "Read Group QC Metrics"
        - const: "Alignment QC"
          title: "Alignment QC Metrics"
        - const: "Auxiliary"
          title: "Auxiliary"
      repository:
        enum:  # list all ARGO RDPC repositories
        - Collab
        - DKFZ
  - oneOf:  # assign each program with one or more repositories
      - properties:
          program:
            const: PACA-CA
          repository:
            enum: [ Collab ]
      - properties:
          program:
            const: OV-AU
          repository:
            enum: [ Collab ]
      - properties:
          program:
            const: PRAD-UK
          repository:
            enum: [ DKFZ, Collab ]
      - properties:
          program:
            const: PBCA-DE
          repository:
            enum: [ DKFZ ]

analysis:
  properties:
    analysis_type:
      type: string
      enum:
      - 'Data submission'
      - 'DNA alignment'
      - 'Data QC'
      - 'Simple somatic mutation calling'
      - 'Copy number somatic mutation calling'
      - 'Structural somatic mutation calling'
    reference_genome:
      enum: [ GRCh38 ]
    tool:  # Tool refers to what's in GA4GH's Tool Registry Service
      toolNames:  # workaround mentioned here: https://json-schema.org/draft-06/json-schema-release-notes.html
        propertyNames:
          enum: [ registry, id, name, short_name, version, included_apps ]
      required: [ id, name, version ]
      properties:
        registry:
          type: string  # such as Dockstore
        id:  # tool ID
          type: string
        name:  # tool name
          type: string
        short_name:
          type: string
        version:
          type: string
        included_apps:  # sync with GA4GH TRS v2 spec
          type: array
          items:
            type: string
    execution:
      additionalProperties: false
      required: [ runner_name, runner_version, job_id ]
      properties:
        runner_name:
          type: string
        runner_version:
          type: string
        job_id:
          type: string
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
