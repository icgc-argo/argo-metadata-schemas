$schema: "http://json-schema.org/draft-07/schema#"

$id: "dna_alignment_qc"
title: QC metrics of aligned DNA sequencing reads
type: object
description: ""
additionalProperties: false

definitions:
  relationDef:
    $ref: '_definitions#/relationDef'
    const:
      category: analysis
      version: 0
      primaryKey:
      - '#/definitions/systemProperties/properties/id'
      uniqueKey:
      - [ '#/properties/inputs/properties/dna_alignment_id' ]   # one dna_alignment can only appear once in dna_alignment_qc
      references:
      - foreignKey:
        - '#/properties/inputs/properties/dna_alignment_id'
        targetEntity: 'dna_alignment'   # dna_alignment_qc to dna_alignment is one-to-one
        targetKey:  # relationship by primaryKey
        - 'dna_alignment#/definitions/systemProperties/properties/id'

  systemProperties:
    properties:
      status:
        $ref: _definitions#/common/properties/bundle_status
      id:
        $ref: _definitions#/common/properties/uuid
      donor:
        $ref: dna_alignment#/definitions/systemProperties/properties/donor
      library_strategy:
        $ref: dna_alignment#/definitions/systemProperties/properties/library_strategy

required:
- type
- program
- inputs
- analysis
- input_files
- qc_metrics
- files

properties:
  type:
    const: "dna_alignment_qc"
  program:
    $ref: _definitions#/common/properties/program_short_name
  inputs:
    properties:
      dna_alignment_id:
        $ref: dna_alignment#/definitions/systemProperties/properties/id
  analysis:
    type: object
    properties:
      analysis_type:
        const: 'QC'
      core_tool:
        const: 'Picard'
      tool:  # Tool refers to what's in GA4GH's Tool Registry Service
        type: object
        properties:
          registry:
            type: string  # such as Dockstore
          tool_id:
            type: string
          tool_name:
            type: string
          version:
            type: string
      execution:
        type: object
        properties:
          runner_name:
            type: string
          runner_version:
            type: string
          job_id:
            type: string
          started_at:
            type: string
            format: date-time
          completed_at:
            type: string
            format: date-time
  input_files:  # input file is aligned bam/cram (multi-lane)
    type: object
    properties:
      aligned_dna_seq:
        type: object
        properties:
          object_uri:  # if file is local, object_id will be 'null'
            type: string  # pattern: song://<repository>/<bundle_id>/<object_id>
          bundle_id:  # dna_alignment
            $ref: "#/properties/inputs/properties/dna_alignment_id"  # get value from
          object_id:  # aligned sequencing file object ID in the above dna_alignment
            type: string
          name:  # file name
            pattern: '\.(bam|cram)$'  # find the bam or cram in the bundle as input file
          secondary_file:  # secondary file(s), following CWL standard
            enum: [ '.bai', '.crai' ]
          repository:  # repo where the object resides
            type: string
  qc_metrics:
    type: object  # to flesh out with more metrics to be included
    properties:
      insert_size_stats:
        type: object
        properties:
          max_insert_size:
            type: integer
          mean_insert_size:
            type: integer
          median_absolute_deviation:
            type: integer
          median_insert_size:
            type: integer
          min_insert_size:
            type: integer
          mode_insert_size:
            type: integer
          read_pairs:
            type: integer
          standard_deviation:
            type: integer
  files:
    type: object
    additionalProperties: false
    properties:
      quality_distribution:
        $id: "#data_object/pdf"
        type: object

        allOf:
        - $ref: _definitions#/submitted_file
        - properties:
            name:
              pattern: '\.pdf\.gz$'  # must have .pdf.gz extension

        definitions:
          relationDef:
            $ref: '_definitions#/relationDef'
            const:
              primaryKey: [ 'id' ]  # shoud use relative json pointer

          systemProperties:
            required: [ id, program, repository, created_at, updated_at, derived_from, bundle_id, bundle_type, format, data_type ]
            allOf:
            - $ref: _definitions#/data_object
            - $ref: _definitions#/repositoryProperties
            - properties:
                program:  # copied from containing parent
                  $ref: "#/properties/program"
                donor:  # copied from containing parent
                  $ref: "#/definitions/systemProperties/properties/donor"
                derived_from:
                  type: object
                  properties:
                    type:
                      const: "sample"
                    id:  # copied from containing parent
                      $ref: "#/definitions/systemProperties/properties/sample_id"
                bundle_id:  # copied from containing parent
                  $ref: "#/definitions/systemProperties/properties/id"
                bundle_type:
                  const: "dna_alignment_qc"
                format:
                  const: "PDF"
                  default: "PDF"
                date_type:
                  const: "Alignment QC"
                  default: "Alignment QC"

      bait_bias_detail_metrics:
        $id: "#data_object/txt"
        type: object

        allOf:
        - $ref: _definitions#/submitted_file
        - properties:
            name:
              pattern: '\.txt\.gz$'  # must have .txt.gz extension

        definitions:
          relationDef:
            $ref: '_definitions#/relationDef'
            const:
              primaryKey: [ 'id' ]  # shoud use relative json pointer

          systemProperties:
            required: [ id, program, repository, created_at, updated_at, derived_from, bundle_id, bundle_type, format, data_type ]
            allOf:
            - $ref: _definitions#/data_object
            - $ref: _definitions#/repositoryProperties
            - properties:
                program:  # copied from containing parent
                  $ref: "#/properties/program"
                donor:  # copied from containing parent
                  $ref: "#/definitions/systemProperties/properties/donor"
                derived_from:
                  type: object
                  properties:
                    type:
                      const: "sample"
                    id:  # copied from containing parent
                      $ref: "#/definitions/systemProperties/properties/sample_id"
                bundle_id:  # copied from containing parent
                  $ref: "#/definitions/systemProperties/properties/id"
                bundle_type:
                  const: "dna_alignment_qc"
                format:
                  const: "TXT"
                  default: "TXT"
                date_type:
                  const: "Alignment QC"
                  default: "Alignment QC"

      quality_by_cycle:
        $ref: "#data_object/txt"
      base_distribution_by_cycle_metrics:
        $ref: "#data_object/txt"
      pre_adapter_summary_metrics:
        $ref: "#data_object/txt"
      quality_by_cycle_metrics:
        $ref: "#data_object/txt"
      insert_size_histogram:
        $id: "#data_object/pdf"
      insert_size_metrics:
        $ref: "#data_object/txt"
      quality_distribution_metrics:
        $ref: "#data_object/txt"
      alignment_summary_metrics:
        $ref: "#data_object/txt"
      error_summary_metrics:
        $ref: "#data_object/txt"
      base_distribution_by_cycle:
        $ref: "#data_object/txt"
      pre_adapter_detail_metrics:
        $ref: "#data_object/txt"
      bait_bias_summary_metrics:
        $ref: "#data_object/txt"
      quality_yield_metrics:
        $ref: "#data_object/txt"
